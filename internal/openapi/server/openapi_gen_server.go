// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "oapi-codegen-example/internal/openapi/model"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
)

// GetUserParams defines parameters for GetUser.
type GetUserParams struct {
	Filter *externalRef0.QueryParamFilter `form:"filter,omitempty" json:"filter,omitempty"`
	Sort   *externalRef0.QueryParamSort   `form:"sort,omitempty" json:"sort,omitempty"`
	Page   *externalRef0.QueryParamPage   `form:"page,omitempty" json:"page,omitempty"`
}

// PostUserJSONRequestBody defines body for PostUser for application/json ContentType.
type PostUserJSONRequestBody = externalRef0.UserCreate

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all Users. Supports optional filtering, sorting, and paging.
	// (GET /user)
	GetUser(c *fiber.Ctx, params GetUserParams) error
	// Create a new User.
	// (POST /user)
	PostUser(c *fiber.Ctx) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// GetUser operation middleware
func (siw *ServerInterfaceWrapper) GetUser(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", query, &params.Filter)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter filter: %w", err).Error())
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", query, &params.Sort)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sort: %w", err).Error())
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", query, &params.Page)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter page: %w", err).Error())
	}

	return siw.Handler.GetUser(c, params)
}

// PostUser operation middleware
func (siw *ServerInterfaceWrapper) PostUser(c *fiber.Ctx) error {

	return siw.Handler.PostUser(c)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Get(options.BaseURL+"/user", wrapper.GetUser)

	router.Post(options.BaseURL+"/user", wrapper.PostUser)

}

type GetUserRequestObject struct {
	Params GetUserParams
}

type GetUserResponseObject interface {
	VisitGetUserResponse(ctx *fiber.Ctx) error
}

type GetUser200JSONResponse []externalRef0.User

func (response GetUser200JSONResponse) VisitGetUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetUser400JSONResponse struct{ ExternalRef0.HTTP400 }

func (response GetUser400JSONResponse) VisitGetUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetUser401JSONResponse struct{ ExternalRef0.HTTP401 }

func (response GetUser401JSONResponse) VisitGetUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type GetUser403JSONResponse struct{ ExternalRef0.HTTP403 }

func (response GetUser403JSONResponse) VisitGetUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type GetUser404JSONResponse struct{ ExternalRef0.HTTP404 }

func (response GetUser404JSONResponse) VisitGetUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetUser429JSONResponse struct{ ExternalRef0.HTTP429 }

func (response GetUser429JSONResponse) VisitGetUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type GetUser500JSONResponse struct{ ExternalRef0.HTTP500 }

func (response GetUser500JSONResponse) VisitGetUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetUser503JSONResponse struct{ ExternalRef0.HTTP503 }

func (response GetUser503JSONResponse) VisitGetUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type GetUser504JSONResponse struct{ ExternalRef0.HTTP504 }

func (response GetUser504JSONResponse) VisitGetUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type PostUserRequestObject struct {
	Body *PostUserJSONRequestBody
}

type PostUserResponseObject interface {
	VisitPostUserResponse(ctx *fiber.Ctx) error
}

type PostUser200JSONResponse externalRef0.User

func (response PostUser200JSONResponse) VisitPostUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type PostUser400JSONResponse struct{ ExternalRef0.HTTP400 }

func (response PostUser400JSONResponse) VisitPostUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostUser401JSONResponse struct{ ExternalRef0.HTTP401 }

func (response PostUser401JSONResponse) VisitPostUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PostUser403JSONResponse struct{ ExternalRef0.HTTP403 }

func (response PostUser403JSONResponse) VisitPostUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type PostUser404JSONResponse struct{ ExternalRef0.HTTP404 }

func (response PostUser404JSONResponse) VisitPostUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PostUser429JSONResponse struct{ ExternalRef0.HTTP429 }

func (response PostUser429JSONResponse) VisitPostUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type PostUser500JSONResponse struct{ ExternalRef0.HTTP500 }

func (response PostUser500JSONResponse) VisitPostUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PostUser503JSONResponse struct{ ExternalRef0.HTTP503 }

func (response PostUser503JSONResponse) VisitPostUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type PostUser504JSONResponse struct{ ExternalRef0.HTTP504 }

func (response PostUser504JSONResponse) VisitPostUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List all Users. Supports optional filtering, sorting, and paging.
	// (GET /user)
	GetUser(ctx context.Context, request GetUserRequestObject) (GetUserResponseObject, error)
	// Create a new User.
	// (POST /user)
	PostUser(ctx context.Context, request PostUserRequestObject) (PostUserResponseObject, error)
}

type StrictHandlerFunc func(ctx *fiber.Ctx, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetUser operation middleware
func (sh *strictHandler) GetUser(ctx *fiber.Ctx, params GetUserParams) error {
	var request GetUserRequestObject

	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetUser(ctx.UserContext(), request.(GetUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetUserResponseObject); ok {
		if err := validResponse.VisitGetUserResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostUser operation middleware
func (sh *strictHandler) PostUser(ctx *fiber.Ctx) error {
	var request PostUserRequestObject

	var body PostUserJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostUser(ctx.UserContext(), request.(PostUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostUserResponseObject); ok {
		if err := validResponse.VisitPostUserResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xY31MbtxP/V/arb2f8crUPjDPJdXggFBI6KXVjaB9ShhGnPVsZnXSsdCROxv97R5KN",
	"MRiMOXf8khfPnbT30WdX+9PfWW7KymjUzrLsO6s48RIdUngzFWpeyUtbYX45F7z8s0Ya973osVQOyctK",
	"zTJ27TdYwjQvkWWsiLsJs/kIS+7FfiIsWMb+35nDdeKu7Tz7uMkkeQa3Ph/iY8wqv7c5XuGo57EaGHKP",
	"sbJ+b3OswlETT4vQVkZbfPJW35+d9ffS1IvkRjvUgSevKiVz7qTRnc/WaL/WjKA/54jIUOQm0OYkK38A",
	"y9hbLuAjXtdoHXvCnpHrzna5nmteu5Eh+Q3FarLd7ZI9NnQlhUC9munedpmeGgfHptarbbr7ZrtMz4yB",
	"37kezzzWrmLc23Z4nWiHpLmCAdINEkwFV7Hesu96sjJHONf8hkvFrxSu5rxlL37HHX7hYziTJZraheow",
	"BVyVhCOmr8ZkKiQnY97G2fLiQUEaSrQ21jQ3rkItcST1MBw7XTFXnzF/Mqsuq+v3skhYh5ykQ5IcpAY3",
	"QigMldxBq5CoxP4NVzW22jCoq8qQQwFeDe4MWeCE0NpvJdD6X/j9p07TLt4+5fO1+Xa+32IJw6+8rFRs",
	"K25PeajvOp3Bom59PpR6+KhuvmU4rcsrpMw/DuQ3bIGhuxutX2D+AtJCCqYoLLr2Av802+29jPisebgX",
	"Hobc01eSCUmYe/FIOSy22vCXt6H1snArEa7oYHDoBX89Ghy24aQAU0rnUCQgHQgseK2cBWe8XPvh3WT+",
	"u3U0PLe4xOGleGlkeryTUD9iZ/VylFP//VpB5L86JOQOH2q0MTaE17UkFCz7FEEX08/FmnxPxEOvOtfy",
	"uka44hZf7UFN6mfUuREoQArUThYSKXgOBw/h3aCU+gPqoRuxbHfN2z+dWuZeuiGJWqgxeB3vHTb3ufeo",
	"lIG/DSnhSfCvMxKvugucdh4mx0nCpC7MEu0tEnw8GpzBQf/Eu7J04az4doNko1zaTts7d5RjGeu203aX",
	"JazibhRuvVNP3XuIbpr7KdQhb3b2Dl1w/2Rh+Pq03EnmImtMS8kGsOIssQmkOCtd3BtKdtfsjKTD0jYJ",
	"JTaPaU7Ex8tq+AH8NvjjFMI+mMKnc4LSEAYntG2PMZ2YltG4VbCzauQKODtNcXYiTrcpTjfi7DXF2Qs4",
	"sUlvgLP7xuP0mtq5F+3ca2qfXrRPr6l9PEBoCuuy5DRmGfsgrQOu1NS7Zv2TBRMckiuIf6hIPUzAGnLh",
	"gWvhuw6ph8EfK2OXJJm+sbMsQ3FWeWvE+D/vkO/Uwsli2XJU46RhDnh56C+Z5W1oaz1VAbbOc7S2qJUa",
	"/wjyH0G+ySCP4QAcNH6Z9jLBHW0YyGPlr0mxjI2cq7JOR5mcq5GxLnudvk47bHIx+TcAAP//BgizcbYV",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "./openapi_spec_components.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
