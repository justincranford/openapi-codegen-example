// Package model provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package model

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// HTTPError defines model for HTTPError.
type HTTPError struct {
	// Error Error message
	Error *string `json:"error,omitempty"`
}

// QueryParamFilter Filter criteria in the format 'field=value'. Supported operators are '=', '!=', '>', '<', '>=', '<='
type QueryParamFilter = string

// QueryParamPage Paging criteria in the format 'pageNumber:pageSize' or 'pageNumber'; pageNumber is 0 offset.
type QueryParamPage = string

// QueryParamSort Sort criteria in the format 'field:direction' or 'field'. Values for direction are ASC or DESC. If omitted, it defaults to ASC.
type QueryParamSort = string

// User defines model for User.
type User struct {
	// Id Unique base64 url-encoded identifier for a User.
	Id *UserId `json:"id,omitempty"`

	// Name Friendly name for a User.
	Name *UserName `json:"name,omitempty"`
}

// UserCreate defines model for UserCreate.
type UserCreate struct {
	// Name Friendly name for a User.
	Name UserName `json:"name"`
}

// UserId Unique base64 url-encoded identifier for a User.
type UserId = string

// UserName Friendly name for a User.
type UserName = string

// HTTP400 defines model for HTTP400.
type HTTP400 = HTTPError

// HTTP401 defines model for HTTP401.
type HTTP401 = HTTPError

// HTTP403 defines model for HTTP403.
type HTTP403 = HTTPError

// HTTP404 defines model for HTTP404.
type HTTP404 = HTTPError

// HTTP429 defines model for HTTP429.
type HTTP429 = HTTPError

// HTTP500 defines model for HTTP500.
type HTTP500 = HTTPError

// HTTP503 defines model for HTTP503.
type HTTP503 = HTTPError

// HTTP504 defines model for HTTP504.
type HTTP504 = HTTPError

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7yVUXPbNgyA/wrG7U4vmqLEae+mXR66LFl9t+W82tketj3QImSjJ5EKCGV1e/7vO1J2",
	"VMd2u7z4RScCID4ABMFPqnRN6yxa8ar4pFrNukFBjqvfO+TVJIhuqRbkICOrCvUQFCpVVjeoClX12lT5",
	"comNDmbfMVaqUN+eDf7Peq0/23O7XqefsSZ6gcdIbdC9nBNd7lKmjuUYxQfdyynR5TpgGH3rrMdYxbez",
	"2eQyz8Nv6aygjVzdtjWVWsjZs/fe2SD7f8Dg74bZcc8y6EumNjhShfpJG3iHDx16Uet0wz4/Dfve6k6W",
	"jukjmgE+Og381vGcjEE7kC9PQ75zAreus0POFz+chjxzDn7TdrU9cb+N4NWp2m1sBdnqGqbIj8iwMdxG",
	"caKzD3AqEe6tftRU63mNQwwn6oJftOC/egUzatB1EqfNZuN2CPR7w5Rl1yIL9fMBt+Jdh9EaGvS+n3my",
	"auNsEia7iO43Ejd/j2W87Yfm9bNbEuVQMgkyaSALskSoHDdaIKkIa3P1qOsOkwymXds6FjQQwtXi2INm",
	"hOQqSSH5Jn7/7vJ8hE9/5SAb1OVVolKFH3TT1v1z8UTZz+vQS7Cbw0QvyC6O5hCeiLuumSMX4XdKHzEB",
	"x58rkh9hWAB5yMFVlUfJduLMi4tXXw5w+4g8a0fH8uUSF4YYy2DehxaFSQZ/hJr4YAtPFrHkb6bXwfDn",
	"m+l1BuMKXEMiaFIgAYOV7mrxIC7YZfu1LsK+Q5ncezzQkGS+dhPCvnGcd/2L+XXru2B3sGmD9ppRC+5H",
	"8mLvjA8dMRpV/NVv3r2m/xzhj83+Kd5beugQ5trj60vouP4ebekMGiCDVqgi5HhSGoKLUPaG7K9oF7JU",
	"xcWRat9tMnp2LZnQmnoFIeZnToezfIt17eBPx7UJMP1hC3s92mGf7w+LdarIVu5Alh4Z3t1MZ/BmMg4t",
	"QhJZ/eoR2fd2eZZn5yEJ16LVLalCjbI8G6lUtVqWXhW2q+v1fwEAAP//LbXAHFAKAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
